// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/userservice/type.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	data "github.com/terdia/mvp/internal/data"
	dto "github.com/terdia/mvp/pkg/dto"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserService) Create(request dto.CreateUserRequest) (*data.User, data.ValidationErrors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", request)
	ret0, _ := ret[0].(*data.User)
	ret1, _ := ret[1].(data.ValidationErrors)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockUserServiceMockRecorder) Create(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserService)(nil).Create), request)
}

// CreateAuthenticationToken mocks base method.
func (m *MockUserService) CreateAuthenticationToken(request dto.AuthTokenRequest, scope string) (*data.Token, data.ValidationErrors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthenticationToken", request, scope)
	ret0, _ := ret[0].(*data.Token)
	ret1, _ := ret[1].(data.ValidationErrors)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateAuthenticationToken indicates an expected call of CreateAuthenticationToken.
func (mr *MockUserServiceMockRecorder) CreateAuthenticationToken(request, scope interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthenticationToken", reflect.TypeOf((*MockUserService)(nil).CreateAuthenticationToken), request, scope)
}

// GetPermissions mocks base method.
func (m *MockUserService) GetPermissions(userID int64) (data.Permissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissions", userID)
	ret0, _ := ret[0].(data.Permissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissions indicates an expected call of GetPermissions.
func (mr *MockUserServiceMockRecorder) GetPermissions(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissions", reflect.TypeOf((*MockUserService)(nil).GetPermissions), userID)
}

// GetUserByToken mocks base method.
func (m *MockUserService) GetUserByToken(tokenPlainText, scope string) (*data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByToken", tokenPlainText, scope)
	ret0, _ := ret[0].(*data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByToken indicates an expected call of GetUserByToken.
func (mr *MockUserServiceMockRecorder) GetUserByToken(tokenPlainText, scope interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByToken", reflect.TypeOf((*MockUserService)(nil).GetUserByToken), tokenPlainText, scope)
}

// UpdateUser mocks base method.
func (m *MockUserService) UpdateUser(arg0 *data.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserService)(nil).UpdateUser), arg0)
}
